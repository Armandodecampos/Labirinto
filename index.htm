<!DOCTYPE html>
<html>
<head>
    <title>Jogo do Labirinto</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=yes, viewport-fit=cover">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Creepster&display=swap" rel="stylesheet">
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000;
            display: flex;
            flex-direction: column;
            height: 70%;
            width: 100vw;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        #gameContainer {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
            position: relative;
            overflow: hidden;
            padding-bottom: 0; /* This will be dynamically set by JavaScript */
            box-sizing: border-box; /* Ensures padding is included in the total height */
        }

        #gameCanvas {
            background-color: black;
            width: 100%;
            height: 100%;
            display: block;
            z-index: 10;
            position: absolute;
        }

        /* Loading Screen */
        #loadingScreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.95);
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 40;
            font-size: 5vw;
            text-align: center;
        }
        #loadingScreen p {
            margin-top: 2vw;
            font-size: 3vw;
        }

        /* Estilos da tela inicial */
        #startScreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 1);
            color: white;
            padding: 3vw;
            border-radius: 5px;
            text-align: center;
            z-index: 20;
            max-width: none;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            box-sizing: border-box;
            overflow-y: auto; /* Adicionado para permitir scroll vertical */
        }
        #startScreen h1 {
            font-family: 'Creepster', cursive; /* Fonte estilizada */
            font-size: 10vw; /* Tamanho maior para o título */
            color: #FFD700; /* Cor dourada */
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.8), 0 0 20px rgba(255, 215, 0, 0.6); /* Sombra para o brilho */
            margin-bottom: 2vw; /* Espaço entre o título e o mascote */
        }
        #startScreen img {
            max-width: 50vw; /* Ajuste o tamanho máximo do mascote */
            max-height: 50vh; /* Ajuste o tamanho máximo do mascote */
            height: auto;
            margin-bottom: 2vw;
        }
        #startButton {
            padding: 2vw 4vw;
            font-size: 3.5vw;
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            opacity: 0.5; /* Disabled state */
            cursor: not-allowed;
            margin-top: 2vw; /* Espaçamento abaixo do mascote/título */
        }
        #startButton.ready {
            opacity: 1;
            cursor: pointer;
        }

        /* Estilos das telas de Fim de Jogo (Game Over e Game Won) */
        .end-game-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgb(0, 0, 0);
            color: white;
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 30;
            font-weight: bold;
            box-sizing: border-box;
        }

        .end-game-screen img {
            max-width: 80%;
            height: auto;
            margin-bottom: 2vw;
        }

        .end-game-screen button {
            margin-top: 2vw;
            padding: 2vw 4vw;
            font-size: 25px;
            cursor: pointer;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 50px; /* Borda arredondada */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Sombra */
            transition: transform 0.2s, background-color 0.2s; /* Transição suave */
        }

        .end-game-screen button:hover {
            transform: translateY(-2px); /* Efeito de elevação */
            background-color: #218838; /* Escurece um pouco no hover */
        }

        .end-game-screen button:active {
            transform: translateY(0); /* Retorna à posição original ao clicar */
            background-color: #1e7e34; /* Mais escuro ao clicar */
        }

        /* Controles - Conteiner principal que engloba todos os botões */
        #controls {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height:30%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5vh 2vw;
            background-color: #222;
            flex-shrink: 0;
            z-index: 15;
            box-sizing: border-box;
            padding-bottom: 30px;
        }

        /* Grupo de botões de movimento em cruz */
        #directional-controls {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            width: 50vmin;
            height: 50vmin;
            max-width: 250px;
            max-height: 250px;
            aspect-ratio: 1 / 1;
            margin-left: 1vw;
            flex-shrink: 0;
        }

        #directional-controls button {
            width: 70px;
            height: 70px;
            font-size: 45px;
            background-color: #333;
            color: white;
            border: 1px solid #555;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0;
            box-sizing: border-box;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: transparent; /* Adicione aqui */
            outline: none; /* Adicione aqui */
        }

        /* Posicionamento dos botões dentro do grid (formato de cruz) */
        #btn-up { grid-area: 1 / 2 / 2 / 3; }
        #btn-left { grid-area: 2 / 1 / 3 / 2; }
        #btn-center { grid-area: 2 / 2 / 3 / 3; opacity: 0; pointer-events: none;}
        #btn-right { grid-area: 2 / 3 / 3 / 4; }
        #btn-down { grid-area: 3 / 2 / 4 / 3; }

        #directional-controls button:active {
            background-color: #555;
        }

        /* Espaço entre os controles direcionais e o botão de ataque */
        #controls > div:first-child {
            margin-right: 4vw;
        }

        /* Botão de ataque */
        #attack-button {
            width: 20vmin;
            height: 20vmin;
            max-width: 130px;
            max-height: 130px;
            font-size: 4.5vw;
            background-color: #dc3545;
            color: white;
            border: 1px solid #bb2d3b;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0;
            box-sizing: border-box;
            margin-right: 2vw;
            flex-shrink: 0;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: transparent; /* Adicione aqui */
            outline: none; /* Adicione aqui */
        }

        #attack-button:active {
            background-color: #bb2d3b;
        }

        /* Media Queries para ajustes finos em diferentes tamanhos de tela */
       @media (orientation: landscape) {
            #directional-controls {
                width: 210px;
                height: 210px;
            }
        }

        @media (min-width: 768px) {
            #directional-controls {
                width: 210px;
                height: 210px;
            }
        }

        /* Estilos para o botão de configurações na tela inicial */
        #startScreenSettingsButton {
            position: fixed; /* Posição absoluta para o canto */
            bottom: 20px; /* Distância do fundo */
            left: 20px; /* Distância da esquerda */
            background-color: #6c757d; /* Cor cinza para configurações */
            color: white;
            border: none;
            padding: 1.5vmin; /* Ajustado para ícone */
            font-size: 4vmin; /* Tamanho do ícone */
            cursor: pointer;
            border-radius: 50%; /* Torna o botão redondo */
            z-index: 25; /* Acima de outros elementos da tela inicial */
            display: flex; /* Para centralizar o ícone */
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3); /* Sombra sutil */
        }
        #startScreenSettingsButton:hover {
            background-color: #5a6268;
        }

        /* Estilos para o botão "Voltar para o Início" (agora um ícone) */
        #backToStartButton {
            position: fixed;
            top: 5px;
            left: 5px;
            background-color: #6c757d;
            color: white;
            border: none;
            padding: 1.5vmin; /* Ajuste o padding para o ícone */
            font-size: 4vmin; /* Tamanho do ícone */
            cursor: pointer;
            border-radius: 50%; /* Torna o botão redondo */
            z-index: 50;
            display: none; /* Escondido inicialmente por padrão */
            align-items: center; /* Para centralizar o ícone */
            justify-content: center; /* Para centralizar o ícone */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3); /* Sombra sutil */
        }
        #backToStartButton:hover {
            background-color: #5a6268;
        }

        /* Estilos para a tela de configurações */
        #settingsScreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            max-height: 100vh; /* Garante que a tela não exceda a altura da viewport */
            background-color: rgba(0, 0, 0, 0.95);
            color: white;
            display: none; /* Escondido por padrão */
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 60; /* Acima de tudo */
            text-align: center;
            padding: 5vmin;
            box-sizing: border-box;
            overflow-y: auto; /* Adiciona scroll vertical se o conteúdo for maior que a tela */
        }
        #settingsScreen h2 {
            margin-bottom: 3vmin;
            font-size: 7vmin;
        }
        #settingsScreen p {
            margin-bottom: 1.5vmin;
            font-size: 3.5vmin;
            line-height: 1.5;
            max-width: 90vw;
        }
        .volume-control {
            margin-top: 2vmin;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 80%;
            max-width: 400px;
        }
        .volume-control label {
            font-size: 3vmin;
            margin-bottom: 1vmin;
        }
        .volume-control input[type="range"] {
            width: 100%;
            height: 10px;
            -webkit-appearance: none;
            background: #d3d3d3;
            outline: none;
            opacity: 0.7;
            transition: opacity .2s;
            border-radius: 5px;
        }
        .volume-control input[type="range"]:hover {
            opacity: 1;
        }
        .volume-control input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            background: #007bff;
            cursor: pointer;
            border-radius: 50%;
        }
        .volume-control input[type="range"]::-moz-range-thumb {
            width: 25px;
            height: 25px;
            background: #007bff;
            cursor: pointer;
            border-radius: 50%;
        }

        #closeSettingsButton {
            margin-top: 5vmin;
            padding: 2vmin 4vmin;
            font-size: 4vmin;
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
        }
        #closeSettingsButton:hover {
            background-color: #0056b3;
        }

    </style>
</head>
<body>
    <div id="loadingScreen">
        <p>Carregando recursos do jogo...</p>
        <p id="loadingProgress">0%</p>
    </div>

    <div id="gameContainer">
        <div id="startScreen">
            <h1>Labirinto</h1> <img src="https://www.dropbox.com/scl/fi/oj14ct0ei359u2xvjnc3q/Guaxinim-pirata-frente.png?rlkey=05dn1b8k0lf090n1a1pty5vsn&raw=1" alt="Mascote do Jogo" style="width: 15vw; height: auto;">
            <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 2vw;">
                <img src="https://dl.dropbox.com/scl/fi/qnkpqvyk4p1jbpx6sl2ws/bau.png?rlkey=1ymyfwp7yhhr7w70k7uwk8787&st=2g7f2edw&dl=0" alt="Moeda" style="width: 10vw; height: 10vw; max-width: 100px; max-height: 100px; margin-right: 2vw;">
                <span id="startScreenGoldAmount" style="font-size: 5vw; color: gold;">0</span>
            </div>
            <button id="startButton" disabled>Iniciar Jogo</button>
            <button id="startScreenSettingsButton"><i class="fas fa-cog"></i></button>
        </div>
        <div id="gameOverScreen" class="end-game-screen">
            <h1>Fim de jogo!</h1>
            <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 2vw;">
                <img src="https://dl.dropbox.com/scl/fi/qnkpqvyk4p1jbpx6sl2ws/bau.png?rlkey=1ymyfwp7yhhr7w70k7uwk8787&st=2g7f2edw&dl=0" alt="Moeda" style="width: 8vw; height: 8vw; max-width: 60px; max-height: 60px; margin-right: 2vw;">
                <span id="gameOverGoldAmount" style="font-size: 5vw; color: gold;">0</span>
            </div>
            <button id="restartButton">Tentar Novamente</button>
        </div>
        <div id="gameWonScreen" class="end-game-screen">
            <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 2vw;">
                <img src="https://dl.dropbox.com/scl/fi/qnkpqvyk4p1jbpx6sl2ws/bau.png?rlkey=1ymyfwp7yhhr7w70k7uwk8787&st=2g7f2edw&dl=0" alt="Moeda" style="width: 8vw; height: 8vw; max-width: 60px; max-height: 60px; margin-right: 2vw;">
                <span id="gameWonGoldAmount" style="font-size: 5vw; color: gold;">0</span>
            </div>
            <button id="playAgainButton">Próxima fase</button>
        </div>
        <canvas id="gameCanvas"></canvas>
    </div>

    <div id="controls">
        <div id="directional-controls">
            <button id="btn-up" onclick="movePlayer('up')">&#9650;</button>
            <button id="btn-left" onclick="movePlayer('left')">&#9664;</button>
            <div id="btn-center"></div>
            <button id="btn-right" onclick="movePlayer('right')">&#9654;</button>
            <button id="btn-down" onclick="movePlayer('down')">&#9660;</button>
        </div>

        <button id="attack-button" onclick="attack()" style="font-size:80px">&#9876;</button>
    </div>

    <button id="backToStartButton"><i class="fas fa-home"></i></button>

    <div id="settingsScreen">
        <h2>Controles</h2>
        <p><b>Movimento:</b></p>
        <p>Teclas W / &#9650; (Cima): Move para cima</p>
        <p>Teclas S / &#9660; (Baixo): Move para baixo</p>
        <p>Teclas A / &#9664; (Esquerda): Move para esquerda</p>
        <p>Teclas D / &#9654; (Direita): Move para direita</p>
        <p><b>Ataque:</b></p>
        <p>Teclas Espaço / Enter / &#9876; (Botão de Ataque): Ataca inimigos</p>

        <div class="volume-control">
            <label for="musicVolume">Volume da Música:</label>
            <input type="range" id="musicVolume" min="0" max="1" step="0.01" value="0.5">
        </div>
        <div class="volume-control">
            <label for="sfxVolume">Volume dos Efeitos Sonoros:</label>
            <input type="range" id="sfxVolume" min="0" max="1" step="0.01" value="0.7">
        </div>

        <button id="closeSettingsButton">Fechar</button>
    </div>

    <script>
        // Variáveis globais no topo para garantir acessibilidade
        let gameStarted = false;
        let maze;
        let player;
        let enemies = [];
        let cellSize;
        let visionRadius;
        let gameSpeed = 75;
        let animationFrameId;
        let totalGold = 0; // Inicializa totalGold
        let isPlayerAnimationInProgress = false;

        // Elementos DOM - Declarados no topo para garantir que estejam disponíveis
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d'); // 'ctx' agora é declarado antes de ser usado
        const startScreen = document.getElementById('startScreen');
        const startButton = document.getElementById('startButton');
        const controls = document.getElementById('controls');
        const gameOverScreen = document.getElementById('gameOverScreen');
        const restartButton = document.getElementById('restartButton');
        const gameWonScreen = document.getElementById('gameWonScreen');
        const playAgainButton = document.getElementById('playAgainButton');
        const gameContainer = document.getElementById('gameContainer');
        const gameWonGoldAmountDisplay = document.getElementById('gameWonGoldAmount');
        const startScreenGoldAmountDisplay = document.getElementById('startScreenGoldAmount');
        const gameOverGoldAmountDisplay = document.getElementById('gameOverGoldAmount');
        const loadingScreen = document.getElementById('loadingScreen');
        const loadingProgress = document.getElementById('loadingProgress');

        // Novos elementos para configurações
        const startScreenSettingsButton = document.getElementById('startScreenSettingsButton');
        const backToStartButton = document.getElementById('backToStartButton');
        const settingsScreen = document.getElementById('settingsScreen');
        const closeSettingsButton = document.getElementById('closeSettingsButton');

        // Controles de volume - Declarados no topo para garantir que estejam disponíveis
        const musicVolumeSlider = document.getElementById('musicVolume');
        const sfxVolumeSlider = document.getElementById('sfxVolume');

        // Sons do jogo
        const gameMusic = new Audio('https://dl.dropbox.com/scl/fi/ln6s85xx16tx6tlk94f3p/crawling-danger-303228.mp3?rlkey=jq78ikfiy3zanle8p9sl1qct9&st=hq0zg4i2&dl=0');
        gameMusic.loop = true;
        gameMusic.volume = 0.5; // Volume inicial da música

        const attackSound = new Audio('https://dl.dropbox.com/scl/fi/pa6u280vcydsvex7mo0e0/hit.mp3?rlkey=u6e9agse4y3q5o3saxbtsxvow&st=a0d2ipds&dl=0');
        attackSound.volume = 0.7; // Volume inicial dos efeitos sonoros

        const enemyDefeatSound = new Audio('https://dl.dropbox.com/scl/fi/n3x8qo2o2ox9adum9mp3j/samurai-slash-6845.mp3?rlkey=un3cqyj1u6c0r3zkzzv6akhyk&st=1dnd12&dl=0');
        enemyDefeatSound.volume = 0.7;

        const gameOverSound = new Audio('https://dl.dropbox.com/scl/fi/98thpjk9tziuxdnv2s91k/game-over.mp3?rlkey=xqstsgukq45sfwv5sw2aeqrv8&st=f7295r7q&dl=0');
        gameOverSound.volume = 0.7;

        const gameWonSound = new Audio('https://dl.dropbox.com/scl/fi/1uybwae0vgm91ka6smtaa/game-won.mp3?rlkey=naeqy6jtfcibr7whk47bndfy5&st=anw0i1vx&dl=0');
        gameWonSound.volume = 0.7;

        const buttonClickSound = new Audio('https://dl.dropbox.com/scl/fi/cytn4gjiinxr3bsfuul0l/passos.mp3?rlkey=p51wwaavfcfs2p39y0qc4zvvp&st=65aoppn8&dl=0');
        buttonClickSound.volume = 0.5;

        // Array de todos os sons que serão controlados pelo slider de SFX
        const sfxSounds = [attackSound, enemyDefeatSound, gameOverSound, gameWonSound, buttonClickSound];

        // Image objects - **VERIFIQUE SUAS URLs AQUI!**
        const playerImageFront = new Image();
        playerImageFront.src = 'https://www.dropbox.com/scl/fi/oj14ct0ei359u2xvjnc3q/Guaxinim-pirata-frente.png?rlkey=05dn1b8k0lf090n1a1pty5vsn&raw=1';
        const playerImageBack = new Image();
        playerImageBack.src = 'https://www.dropbox.com/scl/fi/ga6l0pmdyu3bq7k8lrpje/Guaxinim-pirata-costas.png?rlkey=snacwdyl9or37z80dcqz4invt&raw=1';
        const playerImageSide = new Image();
        playerImageSide.src = 'https://www.dropbox.com/scl/fi/usfxquqqa8csjozrhlqgm/Guaxinim-pirata-lado-direito.png?rlkey=pzlh8a9xztn98ekxlvza8ohc1&raw=1';
        const enemyImage = new Image();
        enemyImage.src = 'https://dl.dropbox.com/scl/fi/ift9fycq40ymfuhqbvsnk/virus.png?rlkey=63mfzrr59mdhxe58828hon4af&st=yhq6w8p7&dl=0';
        const attackEffectImage = new Image();
        attackEffectImage.src = 'https://dl.dropbox.com/scl/fi/wsfuzim41kzcdda33g9cb/Pngtree-glow-light-effect-orange-sparkling_19277829.png?rlkey=6n6oofd62ot29w4d5pdchkbm4&st=n9kgh9nv&dl=0';
        const floorTexture = new Image();
        // Alterado para uma imagem que se repete bem para o chão
        floorTexture.src = 'https://dl.dropbox.com/scl/fi/8d4v35m1pej6i2p9zd4i0/Gemini_Generated_Image_fvq9dnfvq9dnfvq9.png?rlkey=s31ci4if1mq9reh2qiyuxuojt&st=3fx8oy2o&dl=0';
        const wallTexture = new Image();
        wallTexture.src = 'https://dl.dropbox.com/scl/fi/hhe32wffjev38dypmimhn/Gemini_Generated_Image_l2nvkkl2nvkkl2nv.png?rlkey=ergtplwxo4bfunx1zd2xh9dn4&st=v8jb1hg8&dl=0';
        const exitImage = new Image();
        exitImage.src = 'https://dl.dropbox.com/scl/fi/qnkpqvyk4p1jbpx6sl2ws/bau.png?rlkey=1ymyfwp7yhhr7w70k7uwk8787&st=2g7f2edw&dl=0';
        const mascotImage = new Image(); // Mantém a URL do mascote atualizada
        mascotImage.src = 'https://www.dropbox.com/scl/fi/oj14ct0ei359u2xvjnc3q/Guaxinim-pirata-frente.png?rlkey=05dn1b8k0lf090n1a1pty5vsn&raw=1';

        let floorPattern;
        let playerDirection = 'down';

        const assetPromises = [];

        function loadAsset(asset) {
            return new Promise((resolve, reject) => {
                if (asset instanceof HTMLImageElement) {
                    if (asset.complete && asset.naturalHeight !== 0) {
                        resolve();
                    } else {
                        asset.onload = () => {
                            assetsLoadedCount++;
                            loadingProgress.textContent = `${Math.floor((assetsLoadedCount / assetsToLoadCount) * 100)}%`;
                            resolve();
                        };
                        asset.onerror = () => {
                            console.error(`Falha ao carregar imagem: ${asset.src}`);
                            assetsLoadedCount++;
                            loadingProgress.textContent = `${Math.floor((assetsLoadedCount / assetsToLoadCount) * 100)}%`;
                            resolve();
                        };
                    }
                } else if (asset instanceof HTMLAudioElement) {
                    if (asset.readyState >= 2) {
                        resolve();
                    } else {
                        asset.addEventListener('canplaythrough', () => {
                            assetsLoadedCount++;
                            loadingProgress.textContent = `${Math.floor((assetsLoadedCount / assetsToLoadCount) * 100)}%`;
                            resolve();
                        }, { once: true });
                        asset.addEventListener('error', () => {
                            console.error(`Falha ao carregar áudio: ${asset.src}`);
                            assetsLoadedCount++;
                            loadingProgress.textContent = `${Math.floor((assetsLoadedCount / assetsToLoadCount) * 100)}%`;
                            resolve();
                        }, { once: true });
                        asset.load();
                    }
                } else {
                    resolve();
                }
            });
        }

        const assets = [
            playerImageFront, playerImageBack, playerImageSide, enemyImage,
            attackEffectImage, floorTexture, wallTexture, exitImage, mascotImage,
            gameMusic, attackSound, enemyDefeatSound, gameOverSound, gameWonSound, buttonClickSound
        ];
        const assetsToLoadCount = assets.length;
        let assetsLoadedCount = 0;

        assets.forEach(asset => {
            assetPromises.push(loadAsset(asset));
        });

        Promise.all(assetPromises)
            .then(() => {
                // ctx já está definido aqui
                // floorPattern = ctx.createPattern(floorTexture, 'repeat'); // Não é mais necessário para desenhar individualmente
                loadingScreen.style.display = 'none';
                startButton.removeAttribute('disabled');
                startButton.classList.add('ready');
                console.log('Todos os assets carregados. O jogo está pronto para iniciar.');
            })
            .catch(error => {
                console.error('Erro ao carregar os assets:', error);
                loadingProgress.textContent = 'Erro de carregamento. Verifique o console.';
            });

        startButton.addEventListener('click', () => {
            if (startButton.disabled) return;
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
            startScreen.style.display = 'none';
            gameOverScreen.style.display = 'none';
            gameWonScreen.style.display = 'none';
            controls.style.display = 'flex';
            backToStartButton.style.display = 'block'; // Mostra o botão "Voltar para o Início"
            startGame();
            gameMusic.play();
        });

        restartButton.addEventListener('click', () => {
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
            gameOverScreen.style.display = 'none';
            startScreen.style.display = 'none';
            gameWonScreen.style.display = 'none';
            controls.style.display = 'flex';
            backToStartButton.style.display = 'block'; // Mostra o botão "Voltar para o Início"
            totalGold = 0; // Ouro só reseta ao morrer
            startScreenGoldAmountDisplay.textContent = totalGold;
            startGame();
            gameMusic.currentTime = 0;
            gameMusic.play();
        });

        playAgainButton.addEventListener('click', () => {
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
            gameWonScreen.style.display = 'none';
            startScreen.style.display = 'none';
            gameOverScreen.style.display = 'none';
            controls.style.display = 'flex';
            backToStartButton.style.display = 'block'; // Mostra o botão "Voltar para o Início"
            startGame();
            gameMusic.currentTime = 0;
            gameMusic.play();
        });

        document.getElementById('btn-up').addEventListener('click', () => {
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
        });
        document.getElementById('btn-left').addEventListener('click', () => {
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
        });
        document.getElementById('btn-right').addEventListener('click', () => {
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
        });
        document.getElementById('btn-down').addEventListener('click', () => {
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
        });

        startScreenSettingsButton.addEventListener('click', () => {
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
            settingsScreen.style.display = 'flex';
            // Atualiza os sliders com os volumes atuais
            musicVolumeSlider.value = gameMusic.volume;
            sfxVolumeSlider.value = sfxSounds[0].volume; // Assume que todos os SFX têm o mesmo volume
        });

        backToStartButton.addEventListener('click', () => {
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
            gameStarted = false;
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            gameMusic.pause();
            controls.style.display = 'none';
            backToStartButton.style.display = 'none'; // Esconde o botão "Voltar para o Início"
            startScreen.style.display = 'flex';
            // totalGold NÃO é resetado aqui, apenas em gameOver()
            startScreenGoldAmountDisplay.textContent = totalGold; // Atualiza o display com o ouro atual
        });

        closeSettingsButton.addEventListener('click', () => {
            buttonClickSound.currentTime = 0;
            buttonClickSound.play();
            settingsScreen.style.display = 'none';
            if (gameStarted) {
                gameLoop();
                gameMusic.play();
            }
        });

        // Event listeners para os sliders de volume
        musicVolumeSlider.addEventListener('input', (event) => {
            gameMusic.volume = parseFloat(event.target.value);
        });

        sfxVolumeSlider.addEventListener('input', (event) => {
            const newVolume = parseFloat(event.target.value);
            sfxSounds.forEach(sound => {
                sound.volume = newVolume;
            });
        });

        function startGame() {
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            gameStarted = true;
            isPlayerAnimationInProgress = false;
            playerDirection = 'down';

            resizeGameElements();

            cellSize = Math.floor(Math.min(canvas.width, canvas.height) / 10);
            visionRadius = cellSize * 5;

            maze = generateMaze(Math.floor(canvas.width / cellSize), Math.floor(canvas.height / cellSize));
            player = createPlayer();
            enemies = generateEnemies();

            player.speed = 5;
            enemies.forEach(enemy => {
                enemy.speed = 3;
                enemy.moveTimer = 0;
            });

            gameLoop();
        }

        function resizeGameElements() {
            const controlsHeight = controls.offsetHeight;
            gameContainer.style.height = `calc(100vh - ${controlsHeight}px)`;

            canvas.width = gameContainer.clientWidth;
            canvas.height = gameContainer.clientHeight;
        }

        window.addEventListener('resize', () => {
            if (gameStarted) {
                resizeGameElements();
                cellSize = Math.floor(Math.min(canvas.width, canvas.height) / 10);
                visionRadius = cellSize * 5;
                player.size = cellSize;
                player.attackRange = cellSize * 1.5;
                player.x = Math.floor(player.x / cellSize) * cellSize;
                player.y = Math.floor(player.y / cellSize) * cellSize;

                enemies.forEach(enemy => {
                    enemy.size = cellSize;
                    enemy.x = Math.floor(enemy.x / cellSize) * cellSize;
                    enemy.y = Math.floor(enemy.y / cellSize) * cellSize;
                });
            } else {
                resizeGameElements();
            }
        });

        document.addEventListener('DOMContentLoaded', () => {
            resizeGameElements();
            startScreenGoldAmountDisplay.textContent = totalGold;
        });

        function generateMaze(width, height) {
            const grid = Array(height).fill(null).map(() => Array(width).fill(1));
            const startX = 1;
            const startY = 1;
            let path = [[startY, startX]];
            grid[startY][startX] = 0;

            let exitCandidateCells = [];

            while (path.length > 0) {
                const [y, x] = path.pop();
                const directions = shuffle([[0, 2], [0, -2], [2, 0], [-2, 0]]);

                for (const [dy, dx] of directions) {
                    const newY = y + dy;
                    const newX = x + dx;

                    if (newY > 0 && newY < height - 1 && newX > 0 && newX < width - 1 && grid[newY][newX] === 1 && grid[y + dy / 2][x + dx / 2] === 1) {
                        grid[newY][newX] = 0;
                        grid[y + dy / 2][x + dx / 2] = 0;

                        if (newY >= height - 3 || newX >= width - 3) {
                            exitCandidateCells.push([newY, newX]);
                        }
                        path.push([newY, newX]);
                    }
                }
            }

            let exitY = height - 2;
            let exitX = width - 2;

            if (grid[exitY][exitX] === 1 || grid[exitY][exitX] === undefined) {
                let foundExit = false;
                for (let i = exitCandidateCells.length - 1; i >= 0; i--) {
                    const [candY, candX] = exitCandidateCells[i];
                    if (grid[candY][candX] === 0 && (candY >= height - 3 || candX >= width - 3)) {
                        exitY = candY;
                        exitX = candX;
                        foundExit = true;
                        break;
                    }
                }

                if (!foundExit) {
                    for (let r = height - 1; r >= 0; r--) {
                        for (let c = width - 1; c >= 0; c--) {
                            if (grid[r][c] === 0) {
                                exitY = r;
                                exitX = c;
                                foundExit = true;
                                break;
                            }
                        }
                        if (foundExit) break;
                    }
                }
            }
            grid[exitY][exitX] = 2;
            return grid;
        }

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function createPlayer() {
            for (let y = 0; y < maze.length; y++) {
                if (maze[y][0] === 0) {
                    return { x: 0 * cellSize, y: y * cellSize, size: cellSize, speed: 5, isAttacking: false, attackRange: cellSize * 1.5 };
                }
            }
            return { x: 1 * cellSize, y: 1 * cellSize, size: cellSize, speed: 5, isAttacking: false, attackRange: cellSize * 1.5 };
        }

        function generateEnemies() {
            const numEnemies = Math.floor(Math.random() * 16) + 5;
            const enemiesArray = [];
            let placedEnemies = 0;

            while (placedEnemies < numEnemies) {
                const randomY = Math.floor(Math.random() * maze.length);
                const randomX = Math.floor(Math.random() * maze[0].length);

                if (maze[randomY][randomX] === 0 && maze[randomY][randomX] !== 2 && (Math.abs(randomX - player.x / cellSize) > 5 || Math.abs(randomY - player.y / cellSize) > 5)) {
                    enemiesArray.push({ x: randomX * cellSize, y: randomY * cellSize, size: cellSize, speed: 3, moving: false, targetX: null, targetY: null, moveTimer: 0 });
                    placedEnemies++;
                }
            }
            return enemiesArray;
        }

        function movePlayer(direction) {
            if (!gameStarted || isPlayerAnimationInProgress) return;

            let targetX = player.x;
            let targetY = player.y;
            const currentPlayerGridX = Math.floor(player.x / cellSize);
            const currentPlayerGridY = Math.floor(player.y / cellSize);
            let nextGridX = currentPlayerGridX;
            let nextGridY = currentPlayerGridY;

            switch (direction) {
                case 'up':
                    nextGridY--;
                    targetY -= cellSize;
                    playerDirection = 'up';
                    break;
                case 'down':
                    nextGridY++;
                    targetY += cellSize;
                    playerDirection = 'down';
                    break;
                case 'left':
                    nextGridX--;
                    targetX -= cellSize;
                    playerDirection = 'left';
                    break;
                case 'right':
                    nextGridX++;
                    targetX += cellSize;
                    playerDirection = 'right';
                    break;
            }

            if (nextGridY >= 0 && nextGridY < maze.length && nextGridX >= 0 && nextGridX < maze[0].length && maze[nextGridY][nextGridX] !== 1) {
                isPlayerAnimationInProgress = true;
                animateMove(player, targetX, targetY, () => {
                    isPlayerAnimationInProgress = false;
                });
            }
        }

        function animateMove(entity, targetX, targetY, callback) {
            const dx = targetX - entity.x;
            const dy = targetY - entity.y;
            const steps = 10;
            const stepX = dx / steps;
            const stepY = dy / steps;
            let currentStep = 0;

            function animationFrame() {
                entity.x += stepX;
                entity.y += stepY;
                currentStep++;
                if (currentStep < steps) {
                    animationFrameId = requestAnimationFrame(animationFrame);
                } else {
                    entity.x = targetX;
                    entity.y = targetY;
                    if (callback) callback();
                }
            }
            animationFrameId = requestAnimationFrame(animationFrame);
        }

        function attack() {
            if (!gameStarted || !player || player.isAttacking) return;

            attackSound.currentTime = 0;
            attackSound.play();

            player.isAttacking = true;
            setTimeout(() => {
                player.isAttacking = false;
            }, 300);

            const attackDetectionRadius = cellSize * 1.2;

            let attackCenterX = player.x + player.size / 2;
            let attackCenterY = player.y + player.size / 2;

            switch (playerDirection) {
                case 'up':
                    attackCenterY -= cellSize;
                    break;
                case 'down':
                    attackCenterY += cellSize;
                    break;
                case 'left':
                    attackCenterX -= cellSize;
                    break;
                case 'right':
                    attackCenterX += cellSize;
                    break;
            }

            for (let i = enemies.length - 1; i >= 0; i--) {
                const enemy = enemies[i];
                const distance = Math.sqrt(
                    Math.pow(attackCenterX - (enemy.x + enemy.size / 2), 2) +
                    Math.pow(attackCenterY - (enemy.y + enemy.size / 2), 2)
                );

                if (distance < attackDetectionRadius) {
                    enemies.splice(i, 1);
                    enemyDefeatSound.currentTime = 0;
                    enemyDefeatSound.play();
                    break;
                }
            }
        }

        document.addEventListener('keydown', (event) => {
            if (!gameStarted) return;
            switch (event.key) {
                case 'w':
                    buttonClickSound.currentTime = 0;
                    buttonClickSound.play();
                    movePlayer('up');
                    break;
                case 's':
                    buttonClickSound.currentTime = 0;
                    buttonClickSound.play();
                    movePlayer('down');
                    break;
                case 'a':
                    buttonClickSound.currentTime = 0;
                    buttonClickSound.play();
                    movePlayer('left');
                    break;
                case 'd':
                    buttonClickSound.currentTime = 0;
                    buttonClickSound.play();
                    movePlayer('right');
                    break;
                case ' ':
                case 'Enter':
                    attack();
                    break;
            }
        });

        function updateEnemies() {
            for (let i = 0; i < enemies.length; i++) {
                const enemy = enemies[i];
                const enemySpeedFactor = enemy.speed / cellSize;

                if (isEnemyVisible(enemy)) {
                    if (enemy.moving) {
                        if (Math.abs(enemy.x - enemy.targetX) < 1 && Math.abs(enemy.y - enemy.targetY) < 1) {
                            enemy.moving = false;
                            enemy.targetX = null;
                            enemy.targetY = null;
                        } else {
                            const dx = enemy.targetX - enemy.x;
                            const dy = enemy.targetY - enemy.y;
                            const angle = Math.atan2(dy, dx);
                            enemy.x += Math.cos(angle) * enemySpeedFactor;
                            enemy.y += Math.sin(angle) * enemySpeedFactor;
                        }
                        continue;
                    }

                    enemy.moveTimer += 1;
                    if (enemy.moveTimer < 30) continue;
                    enemy.moveTimer = 0;

                    const enemyGridX = Math.floor(enemy.x / cellSize);
                    const enemyGridY = Math.floor(enemy.y / cellSize);

                    let targetGridX = enemyGridX;
                    let targetGridY = enemyGridY;

                    if (canSeePlayer(enemy)) {
                        const playerGridX = Math.floor(player.x / cellSize);
                        const playerGridY = Math.floor(player.y / cellSize);

                        const deltaX = playerGridX - enemyGridX;
                        const deltaY = playerGridY - enemyGridY;

                        let moveX = 0;
                        let moveY = 0;

                        if (Math.abs(deltaX) > Math.abs(deltaY)) {
                            moveX = Math.sign(deltaX);
                        } else if (deltaY !== 0) {
                            moveY = Math.sign(deltaY);
                        }
                        if (moveX === 0 && moveY === 0 && (deltaX !== 0 || deltaY !== 0)) {
                            if (deltaX !== 0) moveX = Math.sign(deltaX);
                            else if (deltaY !== 0) moveY = Math.sign(deltaY);
                        }

                        targetGridX = enemyGridX + moveX;
                        targetGridY = enemyGridY + moveY;

                        if (maze[targetGridY] && maze[targetGridY][targetGridX] === 1) {
                            if (moveX !== 0 && maze[enemyGridY + Math.sign(deltaY)] && maze[enemyGridY + Math.sign(deltaY)][enemyGridX] !== 1) {
                                targetGridX = enemyGridX;
                                targetGridY = enemyGridY + Math.sign(deltaY);
                            } else if (moveY !== 0 && maze[enemyGridY] && maze[enemyGridY][enemyGridX + Math.sign(deltaX)] !== 1) {
                                targetGridX = enemyGridX + Math.sign(deltaX);
                                targetGridY = enemyGridY;
                            } else {
                                targetGridX = enemyGridX;
                                targetGridY = enemyGridY;
                                const possibleMoves = [];
                                if (enemyGridY > 0 && maze[enemyGridY - 1][enemyGridX] === 0) possibleMoves.push({ x: 0, y: -1 });
                                if (enemyGridY < maze.length - 1 && maze[enemyGridY + 1][enemyGridX] === 0) possibleMoves.push({ x: 0, y: 1 });
                                if (enemyGridX > 0 && maze[enemyGridY][enemyGridX - 1] === 0) possibleMoves.push({ x: -1, y: 0 });
                                if (enemyGridX < maze[0].length - 1 && maze[enemyGridY][enemyGridX + 1] === 0) possibleMoves.push({ x: 1, y: 0 });

                                if (possibleMoves.length > 0) {
                                    const move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
                                    targetGridX = enemyGridX + move.x;
                                    targetGridY = enemyGridY + move.y;
                                }
                            }
                        }
                    } else if (Math.random() < 0.1) {
                        const possibleMoves = [];
                        if (enemyGridY > 0 && maze[enemyGridY - 1][enemyGridX] === 0) possibleMoves.push({ x: 0, y: -1 });
                        if (enemyGridY < maze.length - 1 && maze[enemyGridY + 1][enemyGridX] === 0) possibleMoves.push({ x: 0, y: 1 });
                        if (enemyGridX > 0 && maze[enemyGridY][enemyGridX - 1] === 0) possibleMoves.push({ x: -1, y: 0 });
                        if (enemyGridX < maze[0].length - 1 && maze[enemyGridY][enemyGridX + 1] === 0) possibleMoves.push({ x: 1, y: 0 });

                        if (possibleMoves.length > 0) {
                            const move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
                            targetGridX = enemyGridX + move.x;
                            targetGridY = enemyGridY + move.y;
                        }
                    }

                    if (targetGridY >= 0 && targetGridY < maze.length && targetGridX >= 0 && targetGridX < maze[0].length && maze[targetGridY][targetGridX] === 0) {
                        enemy.moving = true;
                        enemy.targetX = targetGridX * cellSize;
                        enemy.targetY = targetGridY * cellSize;
                        animateMove(enemy, enemy.targetX, enemy.targetY, () => {
                            enemy.moving = false;
                            enemy.targetX = null;
                            enemy.targetY = null;
                        });
                    }
                }
            }
        }

        function canSeePlayer(enemy) {
            const enemyGridX = Math.floor(enemy.x / cellSize);
            const enemyGridY = Math.floor(enemy.y / cellSize);
            const playerGridX = Math.floor(player.x / cellSize);
            const playerGridY = Math.floor(player.y / cellSize);

            const dist = Math.sqrt(Math.pow(playerGridX - enemyGridX, 2) + Math.pow(playerGridY - enemyGridY, 2));
            if (dist > (visionRadius / cellSize)) {
                return false;
            }

            let x0 = enemyGridX;
            let y0 = enemyGridY;
            let x1 = playerGridX;
            let y1 = playerGridY;

            let dx = Math.abs(x1 - x0);
            let dy = Math.abs(y1 - y0);
            let sx = (x0 < x1) ? 1 : -1;
            let sy = (y0 < y1) ? 1 : -1;
            let err = dx - dy;

            while (true) {
                if (maze[y0][x0] === 1) {
                    return false;
                }
                if (x0 === x1 && y0 === y1) {
                    break;
                }
                let e2 = 2 * err;
                if (e2 > -dy) { err -= dy; x0 += sx; }
                if (e2 < dx) { err += dx; y0 += sy; }
            }
            return true;
        }

        function isEnemyVisible(enemy) {
            const distance = Math.sqrt(
                Math.pow((player.x + player.size / 2 - enemy.x - enemy.size / 2), 2) +
                Math.pow((player.y + player.size / 2 - enemy.y - enemy.size / 2), 2)
            );
            return distance < visionRadius;
        }

        function checkCollisions() {
            if (!player) return;

            for (const enemy of enemies) {
                if (player.x < enemy.x + enemy.size &&
                    player.x + player.size > enemy.x &&
                    player.y < enemy.y + enemy.size &&
                    player.y + player.size > enemy.y) {
                    gameOver();
                    return true;
                }
            }
            return false;
        }

        function drawMaze() {
            for (let y = 0; y < maze.length; y++) {
                for (let x = 0; x < maze[0].length; x++) {
                    const worldX = x * cellSize;
                    const worldY = y * cellSize;

                    const distanceToPlayer = Math.sqrt(Math.pow((player.x + player.size / 2 - worldX - cellSize / 2), 2) + Math.pow((player.y + player.size / 2 - worldY - cellSize / 2), 2));

                    if (distanceToPlayer < visionRadius) {
                        // Desenha o chão com a imagem diretamente em cada quadrado
                        if (floorTexture.complete && floorTexture.naturalHeight !== 0) {
                            ctx.drawImage(floorTexture, worldX, worldY, cellSize, cellSize);
                        } else {
                            ctx.fillStyle = 'white'; // Cor de fallback se a textura falhar
                            ctx.fillRect(worldX, worldY, cellSize, cellSize);
                        }

                        if (maze[y][x] === 1) {
                            // Desenha os muros sem sombra
                            if (wallTexture.complete && wallTexture.naturalHeight !== 0) {
                                ctx.drawImage(wallTexture, worldX, worldY, cellSize, cellSize);
                            } else {
                                ctx.fillStyle = 'darkgrey';
                                ctx.fillRect(worldX, worldY, cellSize, cellSize);
                            }
                        } else if (maze[y][x] === 2) {
                            // Desenha a saída (baú)
                            if (exitImage.complete && exitImage.naturalHeight !== 0) {
                                ctx.drawImage(exitImage, worldX, worldY, cellSize, cellSize);
                            } else {
                                ctx.fillStyle = 'green';
                                ctx.fillRect(worldX, worldY, cellSize, cellSize);
                            }
                        }
                    } else {
                        ctx.fillStyle = 'black';
                        ctx.fillRect(worldX, worldY, cellSize, cellSize);
                    }
                }
            }
        }

        function drawPlayer() {
            if (!player) return;

            let currentImage;
            let scaleX = 1;

            switch (playerDirection) {
                case 'up':
                    currentImage = playerImageBack;
                    break;
                case 'down':
                    currentImage = playerImageFront;
                    break;
                case 'left':
                    currentImage = playerImageSide;
                    scaleX = -1;
                    break;
                case 'right':
                    currentImage = playerImageSide;
                    break;
                default:
                    currentImage = playerImageFront;
            }

            // Verifica se a imagem foi carregada antes de tentar desenhá-la
            if (currentImage.complete && currentImage.naturalHeight !== 0) {
                ctx.save();
                if (scaleX === -1) {
                    ctx.translate(player.x + player.size, player.y);
                    ctx.scale(scaleX, 1);
                    ctx.drawImage(currentImage, 0, 0, player.size, player.size);
                } else {
                    ctx.drawImage(currentImage, player.x, player.y, player.size, player.size);
                }
                ctx.restore();
            } else {
                // Fallback: Desenha um quadrado colorido se a imagem não carregar
                ctx.fillStyle = 'blue';
                ctx.fillRect(player.x, player.y, player.size, player.size);
                console.warn(`Imagem do jogador (${currentImage.src}) não carregada, usando fallback.`);
            }


            if (player.isAttacking) {
                let attackEffectX = player.x;
                let attackEffectY = player.y;

                switch (playerDirection) {
                    case 'up':
                        attackEffectY -= cellSize;
                        break;
                    case 'down':
                        attackEffectY += cellSize;
                        break;
                    case 'left':
                        attackEffectX -= cellSize;
                        break;
                    case 'right':
                        attackEffectX += cellSize;
                        break;
                }

                if (attackEffectImage.complete && attackEffectImage.naturalHeight !== 0) {
                    ctx.drawImage(attackEffectImage, attackEffectX, attackEffectY, cellSize, cellSize);
                } else {
                    ctx.strokeStyle = 'red';
                    ctx.lineWidth = 5;
                    ctx.strokeRect(attackEffectX, attackEffectY, cellSize, cellSize);
                }
            }
        }

        function drawEnemies() {
            for (const enemy of enemies) {
                if (isEnemyVisible(enemy)) {
                    ctx.drawImage(enemyImage, enemy.x, enemy.y, enemy.size, enemy.size);
                }
            }
        }

        function gameLoop() {
            if (!gameStarted) {
                return;
            }

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawMaze();
            drawEnemies();
            drawPlayer();

            if (checkCollisions()) {
                return;
            }

            const playerGridX = Math.floor(player.x / cellSize);
            const playerGridY = Math.floor(player.y / cellSize);
            if (playerGridY >= 0 && playerGridY < maze.length && playerGridX >= 0 && playerGridX < maze[0].length && maze[playerGridY][playerGridX] === 2) {
                gameWon();
                return;
            }

            updateEnemies();

            animationFrameId = requestAnimationFrame(gameLoop);
        }

        function gameOver() {
            gameStarted = false;
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            gameMusic.pause();
            gameOverSound.currentTime = 0;
            gameOverSound.play();
            controls.style.display = 'none';
            backToStartButton.style.display = 'none'; // Esconde o botão "Voltar para o Início"
            gameOverGoldAmountDisplay.textContent = totalGold;
            gameOverScreen.style.display = 'flex';
            totalGold = 0; // Ouro reseta ao morrer
        }

        function gameWon() {
            gameStarted = false;
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            gameMusic.pause();
            gameWonSound.currentTime = 0;
            gameWonSound.play();
            controls.style.display = 'none';
            backToStartButton.style.display = 'none'; // Esconde o botão "Voltar para o Início"

            const earnedGold = Math.floor(Math.random() * 10000) + 1;
            totalGold += earnedGold;
            gameWonGoldAmountDisplay.textContent = totalGold;
            gameWonScreen.style.display = 'flex';
        }
    </script>
</body>
</html>

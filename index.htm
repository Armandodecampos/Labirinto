<!DOCTYPE html>
<html>
<head>
    <title>Jogo do Labirinto</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=yes, viewport-fit=cover">
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000;
            display: flex;
            flex-direction: column;
            height: 70%;
            width: 100vw;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        #gameContainer {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
            position: relative;
            overflow: hidden;
            /* Add padding-bottom to avoid content being covered by fixed controls */
            padding-bottom: 0; /* This will be dynamically set by JavaScript */
            box-sizing: border-box; /* Ensures padding is included in the total height */
        }

        #gameCanvas {
            background-color: black;
            width: 100%;
            height: 100%;
            display: block;
            z-index: 10;
            position: absolute;
        }

        /* Estilos da tela inicial */
        #startScreen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 3vw;
            border-radius: 5px;
            text-align: center;
            z-index: 20;
            max-width: 90vw;
        }
        #startButton {
            padding: 2vw 4vw;
            font-size: 3.5vw;
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
        }

        /* Estilos das telas de Fim de Jogo (Game Over e Game Won) */
        .end-game-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgb(0, 0, 0);
            color: white;
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 30;
            font-size: 5vw;
            font-weight: bold;
        }

        .end-game-screen button {
            margin-top: 2vw;
            padding: 2vw 4vw;
            font-size: 3.5vw;
            cursor: pointer;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
        }

        /* Controles - Conteiner principal que engloba todos os botões */
        #controls {
            position: fixed; /* Changed to fixed */
            bottom: 0; /* Aligns to the bottom */
            left: 0; /* Aligns to the left */
            right: 0; /* Aligns to the right */
            height:30%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5vh 2vw;
            background-color: #222;
            flex-shrink: 0;
            z-index: 15;
            box-sizing: border-box;
            padding-bottom: 30px;
        }

        /* Grupo de botões de movimento em cruz */
        #directional-controls {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            gap: 1.5vmin;
            width: 35vmin;
            height: 35vmin;
            max-width: 180px;
            max-height: 180px;
            aspect-ratio: 1 / 1;
            margin-left: 1vw;
            flex-shrink: 0;
        }

        #directional-controls button {
            width: 100%;
            height: 100%;
            font-size: 6vw;
            background-color: #333;
            color: white;
            border: 1px solid #555;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0;
            box-sizing: border-box;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        /* Posicionamento dos botões dentro do grid (formato de cruz) */
        #btn-up { grid-area: 1 / 2 / 2 / 3; }
        #btn-left { grid-area: 2 / 1 / 3 / 2; }
        #btn-center { grid-area: 2 / 2 / 3 / 3; opacity: 0; pointer-events: none;}
        #btn-right { grid-area: 2 / 3 / 3 / 4; }
        #btn-down { grid-area: 3 / 2 / 4 / 3; }

        #directional-controls button:active {
            background-color: #555;
        }

        /* Espaço entre os controles direcionais e o botão de ataque */
        #controls > div:first-child {
            margin-right: 4vw;
        }

        /* Botão de ataque */
        #attack-button {
            width: 20vmin;
            height: 20vmin;
            max-width: 130px;
            max-height: 130px;
            font-size: 4.5vw;
            background-color: #dc3545;
            color: white;
            border: 1px solid #bb2d3b;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0;
            box-sizing: border-box;
            margin-right: 2vw;
            flex-shrink: 0;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        #attack-button:active {
            background-color: #bb2d3b;
        }

        /* Media Queries para ajustes finos em diferentes tamanhos de tela */
        @media (orientation: landscape) {
            #directional-controls {
                width: 28vmin;
                height: 28vmin;
            }
            #attack-button {
                width: 16vmin;
                height: 16vmin;
            }
            #directional-controls button {
                font-size: 5vw;
            }
            #attack-button {
                font-size: 3.5vw;
            }
        }

        @media (min-width: 768px) {
            #directional-controls {
                width: 180px;
                height: 180px;
            }
            #directional-controls button {
                font-size: 45px;
            }
            #attack-button {
                width: 130px;
                height: 130px;
                font-size: 30px;
            }
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <div id="startScreen">
            <h1>Jogo do Labirinto</h1>
            <button id="startButton">Iniciar Jogo</button>
        </div>
        <div id="gameOverScreen" class="end-game-screen">
            Você perdeu!
            <button id="restartButton">Tentar Novamente</button>
        </div>
        <div id="gameWonScreen" class="end-game-screen">
            Você Venceu!
            <button id="playAgainButton">Jogar Novamente</button>
        </div>
        <canvas id="gameCanvas"></canvas>
    </div>

    <div id="controls">
        <div id="directional-controls">
            <button id="btn-up" onmousedown="movePlayer('up')" ontouchstart="movePlayer('up')">&#9650;</button>
            <button id="btn-left" onmousedown="movePlayer('left')" ontouchstart="movePlayer('left')">&#9664;</button>
            <div id="btn-center"></div>
            <button id="btn-right" onmousedown="movePlayer('right')" ontouchstart="movePlayer('right')">&#9654;</button>
            <button id="btn-down" onmousedown="movePlayer('down')" ontouchstart="movePlayer('down')">&#9660;</button>
        </div>

        <button id="attack-button" onmousedown="attack()" ontouchstart="attack()">Atacar</button>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const startScreen = document.getElementById('startScreen');
        const startButton = document.getElementById('startButton');
        const controls = document.getElementById('controls');
        const gameOverScreen = document.getElementById('gameOverScreen');
        const restartButton = document.getElementById('restartButton');
        const gameWonScreen = document.getElementById('gameWonScreen');
        const playAgainButton = document.getElementById('playAgainButton');
        const gameContainer = document.getElementById('gameContainer'); // Get gameContainer

        let gameStarted = false;
        let maze;
        let player;
        let enemies = [];
        let cellSize;
        let visionRadius;
        let gameSpeed = 75;
        let playerMoving = false;
        let playerMoveQueue = [];
        let animationFrameId;

        startButton.addEventListener('click', () => {
            startScreen.style.display = 'none';
            gameOverScreen.style.display = 'none';
            gameWonScreen.style.display = 'none';
            controls.style.display = 'flex';
            startGame();
        });

        restartButton.addEventListener('click', () => {
            gameOverScreen.style.display = 'none';
            startScreen.style.display = 'none';
            gameWonScreen.style.display = 'none';
            controls.style.display = 'flex';
            startGame();
        });

        playAgainButton.addEventListener('click', () => {
            gameWonScreen.style.display = 'none';
            startScreen.style.display = 'none';
            gameOverScreen.style.display = 'none';
            controls.style.display = 'flex';
            startGame();
        });

        function startGame() {
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            gameStarted = true;
            playerMoving = false;
            playerMoveQueue = [];

            resizeGameElements();
            
            cellSize = Math.floor(Math.min(canvas.width, canvas.height) / 20); 
            visionRadius = cellSize * 5;

            maze = generateMaze(Math.floor(canvas.width / cellSize), Math.floor(canvas.height / cellSize));
            player = createPlayer();
            enemies = generateEnemies();

            player.speed = 5;
            enemies.forEach(enemy => {
                enemy.speed = 3;
                enemy.moveTimer = 0;
            });

            gameLoop();
        }

        function resizeGameElements() {
            // Set gameContainer height based on controls height
            const controlsHeight = controls.offsetHeight;
            gameContainer.style.height = `calc(100vh - ${controlsHeight}px)`;
            
            canvas.width = gameContainer.clientWidth;
            canvas.height = gameContainer.clientHeight;
        }

        window.addEventListener('resize', () => {
            if (gameStarted) {
                resizeGameElements();
                cellSize = Math.floor(Math.min(canvas.width, canvas.height) / 20);
                visionRadius = cellSize * 5;
                player.x = Math.floor(player.x / cellSize) * cellSize;
                player.y = Math.floor(player.y / cellSize) * cellSize;
                player.size = cellSize * 0.8;

                enemies.forEach(enemy => {
                    enemy.x = Math.floor(enemy.x / cellSize) * cellSize;
                    enemy.y = Math.floor(enemy.y / cellSize) * cellSize;
                    enemy.size = cellSize * 0.6;
                });
            } else {
                // If game not started, just ensure initial sizing is correct on resize
                resizeGameElements();
            }
        });

        // Initial call to resize elements when the page loads
        document.addEventListener('DOMContentLoaded', resizeGameElements);


        function generateMaze(width, height) {
            const grid = Array(height).fill(null).map(() => Array(width).fill(1));
            const startX = 1;
            const startY = 1;
            let path = [[startY, startX]];
            grid[startY][startX] = 0;

            let exitCandidateCells = [];

            while (path.length > 0) {
                const [y, x] = path.pop();
                const directions = shuffle([[0, 2], [0, -2], [2, 0], [-2, 0]]);

                for (const [dy, dx] of directions) {
                    const newY = y + dy;
                    const newX = x + dx;

                    if (newY > 0 && newY < height - 1 && newX > 0 && newX < width - 1 && grid[newY][newX] === 1 && grid[y + dy / 2][x + dx / 2] === 1) {
                        grid[newY][newX] = 0;
                        grid[y + dy / 2][x + dx / 2] = 0;

                        if (newY >= height - 3 || newX >= width - 3) {
                            exitCandidateCells.push([newY, newX]);
                        }
                        path.push([newY, newX]);
                    }
                }
            }

            let exitY = height - 2;
            let exitX = width - 2;

            if (grid[exitY][exitX] === 1 || grid[exitY][exitX] === undefined) {
                let foundExit = false;
                for (let i = exitCandidateCells.length - 1; i >= 0; i--) {
                    const [candY, candX] = exitCandidateCells[i];
                    if (grid[candY][candX] === 0 && (candY >= height - 3 || candX >= width - 3)) {
                        exitY = candY;
                        exitX = candX;
                        foundExit = true;
                        break;
                    }
                }

                if (!foundExit) {
                    for (let r = height - 1; r >= 0; r--) {
                        for (let c = width - 1; c >= 0; c--) {
                            if (grid[r][c] === 0) {
                                exitY = r;
                                exitX = c;
                                foundExit = true;
                                break;
                            }
                        }
                        if (foundExit) break;
                    }
                }
            }
            grid[exitY][exitX] = 2;
            return grid;
        }

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function createPlayer() {
            for (let y = 0; y < maze.length; y++) {
                if (maze[y][0] === 0) {
                    return { x: 0 * cellSize, y: y * cellSize, size: cellSize * 0.8, speed: 5, isAttacking: false, attackRange: cellSize };
                }
            }
            return { x: 1 * cellSize, y: 1 * cellSize, size: cellSize * 0.8, speed: 5, isAttacking: false, attackRange: cellSize };
        }

        function generateEnemies() {
            const numEnemies = Math.floor(Math.random() * 16) + 5;
            const enemiesArray = [];
            let placedEnemies = 0;

            while (placedEnemies < numEnemies) {
                const randomY = Math.floor(Math.random() * maze.length);
                const randomX = Math.floor(Math.random() * maze[0].length);

                if (maze[randomY][randomX] === 0 && maze[randomY][randomX] !== 2 && (Math.abs(randomX - player.x / cellSize) > 5 || Math.abs(randomY - player.y / cellSize) > 5)) {
                    enemiesArray.push({ x: randomX * cellSize, y: randomY * cellSize, size: cellSize * 0.6, speed: 3, moving: false, targetX: null, targetY: null, moveTimer: 0 });
                    placedEnemies++;
                }
            }
            return enemiesArray;
        }

        function movePlayer(direction) {
            if (!gameStarted) return;

            if (playerMoving) {
                playerMoveQueue.push(direction);
                return;
            }

            let targetX = player.x;
            let targetY = player.y;
            const currentPlayerGridX = Math.floor(player.x / cellSize);
            const currentPlayerGridY = Math.floor(player.y / cellSize);
            let nextGridX = currentPlayerGridX;
            let nextGridY = currentPlayerGridY;

            switch (direction) {
                case 'up': nextGridY--; targetY -= cellSize; break;
                case 'down': nextGridY++; targetY += cellSize; break;
                case 'left': nextGridX--; targetX -= cellSize; break;
                case 'right': nextGridX++; targetX += cellSize; break;
            }

            if (nextGridY >= 0 && nextGridY < maze.length && nextGridX >= 0 && nextGridX < maze[0].length && maze[nextGridY][nextGridX] !== 1) {
                playerMoving = true;
                animateMove(player, targetX, targetY, () => {
                    playerMoving = false;
                    if (playerMoveQueue.length > 0) {
                        movePlayer(playerMoveQueue.shift());
                    }
                });
            }
        }

        function animateMove(entity, targetX, targetY, callback) {
            const dx = targetX - entity.x;
            const dy = targetY - entity.y;
            const steps = 10;
            const stepX = dx / steps;
            const stepY = dy / steps;
            let currentStep = 0;

            function animationFrame() {
                if (!gameStarted) return;
                entity.x += stepX;
                entity.y += stepY;
                currentStep++;
                if (currentStep < steps) {
                    animationFrameId = requestAnimationFrame(animationFrame);
                } else {
                    entity.x = targetX;
                    entity.y = targetY;
                    if (callback) callback();
                }
            }
            animationFrameId = requestAnimationFrame(animationFrame);
        }

        function attack() {
            if (!gameStarted || !player || player.isAttacking) return;

            player.isAttacking = true;
            setTimeout(() => {
                player.isAttacking = false;
            }, 300);

            const playerGridX = Math.floor(player.x / cellSize);
            const playerGridY = Math.floor(player.y / cellSize);

            for (let i = enemies.length - 1; i >= 0; i--) {
                const enemyGridX = Math.floor(enemies[i].x / cellSize);
                const enemyGridY = Math.floor(enemies[i].y / cellSize);

                const distance = Math.abs(playerGridX - enemyGridX) + Math.abs(playerGridY - enemyGridY);

                if (distance <= 1) {
                    enemies.splice(i, 1);
                }
            }
        }

        document.addEventListener('keydown', (event) => {
            if (!gameStarted) return;
            switch (event.key) {
                case 'w': movePlayer('up'); break;
                case 's': movePlayer('down'); break;
                case 'a': movePlayer('left'); break;
                case 'd': movePlayer('right'); break;
                case ' ': attack(); break;
            }
        });

        function updateEnemies() {
            for (let i = 0; i < enemies.length; i++) {
                const enemy = enemies[i];
                const enemySpeedFactor = enemy.speed / cellSize;

                if (isEnemyVisible(enemy)) {
                    if (enemy.moving) {
                        if (Math.abs(enemy.x - enemy.targetX) < 1 && Math.abs(enemy.y - enemy.targetY) < 1) {
                            enemy.moving = false;
                            enemy.targetX = null;
                            enemy.targetY = null;
                        } else {
                            const dx = enemy.targetX - enemy.x;
                            const dy = enemy.targetY - enemy.y;
                            const angle = Math.atan2(dy, dx);
                            enemy.x += Math.cos(angle) * enemySpeedFactor;
                            enemy.y += Math.sin(angle) * enemySpeedFactor;
                        }
                        continue;
                    }

                    enemy.moveTimer += 1;
                    if (enemy.moveTimer < 30) continue;
                    enemy.moveTimer = 0;

                    const enemyGridX = Math.floor(enemy.x / cellSize);
                    const enemyGridY = Math.floor(enemy.y / cellSize);

                    let targetGridX = enemyGridX;
                    let targetGridY = enemyGridY;

                    if (canSeePlayer(enemy)) {
                        const playerGridX = Math.floor(player.x / cellSize);
                        const playerGridY = Math.floor(player.y / cellSize);

                        const deltaX = playerGridX - enemyGridX;
                        const deltaY = playerGridY - enemyGridY;

                        let moveX = 0;
                        let moveY = 0;

                        if (Math.abs(deltaX) > Math.abs(deltaY)) {
                            moveX = Math.sign(deltaX);
                        } else if (deltaY !== 0) {
                            moveY = Math.sign(deltaY);
                        }
                        if (moveX === 0 && moveY === 0 && (deltaX !== 0 || deltaY !== 0)) {
                            if (deltaX !== 0) moveX = Math.sign(deltaX);
                            else if (deltaY !== 0) moveY = Math.sign(deltaY);
                        }

                        targetGridX = enemyGridX + moveX;
                        targetGridY = enemyGridY + moveY;

                        if (maze[targetGridY] && maze[targetGridY][targetGridX] === 1) {
                            if (moveX !== 0 && maze[enemyGridY + Math.sign(deltaY)] && maze[enemyGridY + Math.sign(deltaY)][enemyGridX] !== 1) {
                                targetGridX = enemyGridX;
                                targetGridY = enemyGridY + Math.sign(deltaY);
                            } else if (moveY !== 0 && maze[enemyGridY] && maze[enemyGridY][enemyGridX + Math.sign(deltaX)] !== 1) {
                                targetGridX = enemyGridX + Math.sign(deltaX);
                                targetGridY = enemyGridY;
                            } else {
                                targetGridX = enemyGridX;
                                targetGridY = enemyGridY;
                                const possibleMoves = [];
                                if (enemyGridY > 0 && maze[enemyGridY - 1][enemyGridX] === 0) possibleMoves.push({ x: 0, y: -1 });
                                if (enemyGridY < maze.length - 1 && maze[enemyGridY + 1][enemyGridX] === 0) possibleMoves.push({ x: 0, y: 1 });
                                if (enemyGridX > 0 && maze[enemyGridY][enemyGridX - 1] === 0) possibleMoves.push({ x: -1, y: 0 });
                                if (enemyGridX < maze[0].length - 1 && maze[enemyGridY][enemyGridX + 1] === 0) possibleMoves.push({ x: 1, y: 0 });

                                if (possibleMoves.length > 0) {
                                    const move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
                                    targetGridX = enemyGridX + move.x;
                                    targetGridY = enemyGridY + move.y;
                                }
                            }
                        }
                    } else if (Math.random() < 0.1) {
                        const possibleMoves = [];
                        if (enemyGridY > 0 && maze[enemyGridY - 1][enemyGridX] === 0) possibleMoves.push({ x: 0, y: -1 });
                        if (enemyGridY < maze.length - 1 && maze[enemyGridY + 1][enemyGridX] === 0) possibleMoves.push({ x: 0, y: 1 });
                        if (enemyGridX > 0 && maze[enemyGridY][enemyGridX - 1] === 0) possibleMoves.push({ x: -1, y: 0 });
                        if (enemyGridX < maze[0].length - 1 && maze[enemyGridY][enemyGridX + 1] === 0) possibleMoves.push({ x: 1, y: 0 });

                        if (possibleMoves.length > 0) {
                            const move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
                            targetGridX = enemyGridX + move.x;
                            targetGridY = enemyGridY + move.y;
                        }
                    }

                    if (targetGridY >= 0 && targetGridY < maze.length && targetGridX >= 0 && targetGridX < maze[0].length && maze[targetGridY][targetGridX] === 0) {
                        enemy.moving = true;
                        enemy.targetX = targetGridX * cellSize;
                        enemy.targetY = targetGridY * cellSize;
                        animateMove(enemy, enemy.targetX, enemy.targetY, () => {
                            enemy.moving = false;
                            enemy.targetX = null;
                            enemy.targetY = null;
                        });
                    }
                }
            }
        }

        function canSeePlayer(enemy) {
            const enemyGridX = Math.floor(enemy.x / cellSize);
            const enemyGridY = Math.floor(enemy.y / cellSize);
            const playerGridX = Math.floor(player.x / cellSize);
            const playerGridY = Math.floor(player.y / cellSize);

            const dist = Math.sqrt(Math.pow(playerGridX - enemyGridX, 2) + Math.pow(playerGridY - enemyGridY, 2));
            if (dist > (visionRadius / cellSize)) {
                return false;
            }

            let x0 = enemyGridX;
            let y0 = enemyGridY;
            let x1 = playerGridX;
            let y1 = playerGridY;

            let dx = Math.abs(x1 - x0);
            let dy = Math.abs(y1 - y0);
            let sx = (x0 < x1) ? 1 : -1;
            let sy = (y0 < y1) ? 1 : -1;
            let err = dx - dy;

            while (true) {
                if (maze[y0][x0] === 1) {
                    return false;
                }
                if (x0 === x1 && y0 === y1) {
                    break;
                }
                let e2 = 2 * err;
                if (e2 > -dy) { err -= dy; x0 += sx; }
                if (e2 < dx) { err += dx; y0 += sy; }
            }
            return true;
        }

        function isEnemyVisible(enemy) {
            const distance = Math.sqrt(
                Math.pow((player.x + player.size / 2 - enemy.x - enemy.size / 2), 2) +
                Math.pow((player.y + player.size / 2 - enemy.y - enemy.size / 2), 2)
            );
            return distance < visionRadius;
        }

        function checkCollisions() {
            if (!player) return;

            for (const enemy of enemies) {
                if (player.x < enemy.x + enemy.size &&
                    player.x + player.size > enemy.x &&
                    player.y < enemy.y + enemy.size &&
                    player.y + player.size > enemy.y) {
                    gameOver();
                    return true;
                }
            }
            return false;
        }

        function drawMaze() {
            for (let y = 0; y < maze.length; y++) {
                for (let x = 0; x < maze[0].length; x++) {
                    const worldX = x * cellSize;
                    const worldY = y * cellSize;

                    const distanceToPlayer = Math.sqrt(Math.pow((player.x + player.size / 2 - worldX - cellSize / 2), 2) + Math.pow((player.y + player.size / 2 - worldY - cellSize / 2), 2));
                    if (distanceToPlayer < visionRadius) {
                        if (maze[y][x] === 1) {
                            ctx.fillStyle = 'darkgrey';
                            ctx.fillRect(worldX, worldY, cellSize, cellSize);
                        } else if (maze[y][x] === 2) {
                            ctx.fillStyle = 'green';
                            ctx.fillRect(worldX, worldY, cellSize, cellSize);
                        } else {
                            ctx.fillStyle = 'white';
                            ctx.fillRect(worldX, worldY, cellSize, cellSize);
                        }
                    } else {
                        ctx.fillStyle = 'black';
                        ctx.fillRect(worldX, worldY, cellSize, cellSize);
                    }
                }
            }
        }

        function drawPlayer() {
            if (!player) return;
            ctx.fillStyle = 'blue';
            ctx.fillRect(player.x, player.y, player.size, player.size);

            if (player.isAttacking) {
                ctx.strokeStyle = 'red';
                ctx.lineWidth = 5;
                ctx.strokeRect(player.x - cellSize, player.y - cellSize, player.size + 2 * cellSize, player.size + 2 * cellSize);
            }
        }

        function drawEnemies() {
            for (const enemy of enemies) {
                if (isEnemyVisible(enemy)) {
                    ctx.fillStyle = 'red';
                    ctx.fillRect(enemy.x, enemy.y, enemy.size, enemy.size);
                }
            }
        }

        function gameLoop() {
            if (!gameStarted) return;

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawMaze();
            drawEnemies();
            drawPlayer();

            if (checkCollisions()) {
                return;
            }

            const playerGridX = Math.floor(player.x / cellSize);
            const playerGridY = Math.floor(player.y / cellSize);
            if (playerGridY >= 0 && playerGridY < maze.length && playerGridX >= 0 && playerGridX < maze[0].length && maze[playerGridY][playerGridX] === 2) {
                gameWon();
                return;
            }

            updateEnemies();

            animationFrameId = requestAnimationFrame(gameLoop);
        }

        function gameOver() {
            gameStarted = false;
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            controls.style.display = 'none';
            gameOverScreen.style.display = 'flex';
        }

        function gameWon() {
            gameStarted = false;
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            controls.style.display = 'none';
            gameWonScreen.style.display = 'flex';
        }
    </script>
</body>
</html>
